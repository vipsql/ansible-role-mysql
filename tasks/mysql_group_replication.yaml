---
- name: Check the group replication status
  community.general.mysql_query:
    query: SELECT service_state FROM performance_schema.replication_connection_status WHERE channel_name='group_replication_applier'
  register: group_replication_status

- name: Change master for group replication channel
  community.general.mysql_replication:
    mode: changemaster
    master_user: repl
    master_password: "{{ mysql_repl_password }}"
    channel: group_replication_recovery
  when:
    - group_replication_status.rowcount[0]|int == 0
    # - group_replication_status.query_result[0][0]['service_state'] != 'ON'

# - name: Verify that the primary node status
#   mysql_query:
#     query: SELECT * FROM performance_schema.replication_group_members where member_role='PRIMARY'
#   run_once: true
#   register: mysql_mgr_primary_status
#   when:
#     - (mysql_inventory_group+'_primary' in groups and inventory_hostname in groups[mysql_inventory_group+'_primary']) or groups[mysql_inventory_group].index(inventory_hostname) == 0
#   tags:
#     - skip_ansible_lint

- name: Bootstrap group replication on first primary node
  community.general.mysql_query:
    query:
      - "SET GLOBAL group_replication_bootstrap_group=ON;"
      - "START GROUP_REPLICATION;"
      - "SET GLOBAL group_replication_bootstrap_group=OFF;"
  run_once: true
  when:
    - (mysql_inventory_group+'_primary' in groups and inventory_hostname in groups[mysql_inventory_group+'_primary']) or groups[mysql_inventory_group].index(inventory_hostname) == 0
    - group_replication_status.rowcount[0]|int == 0
    # - group_replication_status.query_result[0][0]['service_state'] != 'ON'
  tags:
    - skip_ansible_lint

# - name: Verify that the member nodes status
#   mysql_query:
#     query: SELECT member_state FROM performance_schema.replication_group_members where member_id=@@server_uuid
#   register: mysql_mgr_member_status
#   when:
#     - (mysql_inventory_group+'_secondary' in groups and inventory_hostname in groups[mysql_inventory_group+'_secondary']) or groups[mysql_inventory_group].index(inventory_hostname) != 0
#   tags:
#     - skip_ansible_lint

- name: Startting group replication member nodes
  community.general.mysql_query:
    query: "START GROUP_REPLICATION;"
  when:
    - (mysql_inventory_group+'_secondary' in groups and inventory_hostname in groups[mysql_inventory_group+'_secondary']) or groups[mysql_inventory_group].index(inventory_hostname) != 0
    - group_replication_status.rowcount[0]|int == 0
    # - group_replication_status.query_result[0][0]['service_state'] != 'ON'
  tags:
    - skip_ansible_lint

- name: Copy gr_member_routing_candidate_status.sql
  copy:
    src: gr_member_routing_candidate_status.sql
    dest: /tmp/gr_member_routing_candidate_status.sql
  run_once: true
  when:
    - mysql_proxysql_config|bool
    - (mysql_inventory_group+'_primary' in groups and inventory_hostname in groups[mysql_inventory_group+'_primary']) or groups[mysql_inventory_group].index(inventory_hostname) == 0
    - mysql_initialize_status is not skipped

- name: Create internal view sys.gr_member_routing_candidate_status for monitoring
  community.general.mysql_db:
    name: all
    target: /tmp/gr_member_routing_candidate_status.sql
    state: import
  # no_log: yes
  environment:
    PATH: /usr/local/mysql/bin:{{ ansible_env.PATH }}
  run_once: true
  when:
    - mysql_proxysql_config|bool
    - (mysql_inventory_group+'_primary' in groups and inventory_hostname in groups[mysql_inventory_group+'_primary']) or groups[mysql_inventory_group].index(inventory_hostname) == 0
    - mysql_initialize_status is not skipped

- name: Create proxysql monitor account
  community.general.mysql_user:
    name: "{{ mysql_proxysql_monitor_username }}"
    password: "{{ mysql_proxysql_monitor_password }}"
    host: "%"
    priv: "sys.*:SELECT"
    state: present
  when:
    - mysql_proxysql_config|bool
    - (mysql_inventory_group+'_primary' in groups and inventory_hostname in groups[mysql_inventory_group+'_primary']) or groups[mysql_inventory_group].index(inventory_hostname) == 0

- name: Show Group Replication status
  community.general.mysql_query:
    query: SELECT * FROM performance_schema.replication_group_members
  run_once: True
