---
- import_tasks: check_vars.yaml
- import_tasks: prepare.yaml

- name: Download mysql package
  get_url:
    url: "{{ mysql_download_url }}"
    dest: "{{ playbook_dir }}/files/{{ mysql_download_url | basename }}"
    # checksum: "md5:{{ mysql_download_url }}.md5"
    timeout: 300
  become: false
  run_once: true
  delegate_to: localhost
  when:
    - not _mysql_stat.stat.exists
  register: _mysql_package

- name: Unarchive mysql binary package
  unarchive:
    src: "files/{{ mysql_download_url | basename }}"
    dest: /usr/local/
    creates: /usr/local/mysql-{{ mysql_version }}-el7-x86_64
    remote_src: false
    owner: mysql
    group: mysql
  when:
    - not _mysql_stat.stat.exists
  register: _mysql_unarchive

- name: Symlink /usr/local/mysql-{{ mysql_version }}-el7-x86_64 to /usr/local/mysql
  file:
    src: /usr/local/mysql-{{ mysql_version }}-el7-x86_64
    dest: /usr/local/mysql
    owner: mysql
    group: mysql
    state: link
    force: True
  when:
    - _mysql_unarchive is not skipped
  tags:
    - skip_ansible_lint

- name: Ensure directories
  file:
    path: "{{ item }}"
    state: directory
    recurse: true
    owner: mysql
    group: mysql
  loop:
    - /usr/local/mysql/etc
    - "{{ mysql_datadir }}"
    - "{{ mysql_logdir }}"
    - "{{ mysql_pidfile | dirname }}"
    - "{{ mysql_socket | dirname }}"

- name: Setting PATH environment variable
  copy:
    content: "export PATH=/usr/local/mysql/bin:$PATH"
    dest: /etc/profile.d/mysql.sh

- name: Generate my.cnf
  template:
    src: my.cnf.j2
    dest: /usr/local/mysql/etc/my.cnf
    owner: mysql
    group: mysql
    validate: /usr/local/mysql/bin/mysqld --defaults-file=%s --validate-config
  notify:
    - restart mysqld

- name: Generate logrotate for logs
  template:
    src: mysql-log-rotate.j2
    dest: /etc/logrotate.d/mysql
    owner: root
    group: root
    mode: "644"

- name: Generate mysql startup script
  template:
    src: mysqld.init.j2
    dest: /etc/init.d/mysqld
    mode: "755"

- name: Check initialize status
  shell: ls -lA {{ mysql_datadir }} | grep -v total | wc -l
  register: need_to_initialize
  changed_when: false
  tags:
    - skip_ansible_lint

- name: Initializing the Data Directory
  shell: /usr/local/mysql/bin/mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir={{ mysql_datadir }}
  register: mysql_initialize_status
  when:
    - not need_to_initialize is skipped
    - need_to_initialize.stdout|int == 0
  tags:
    - skip_ansible_lint

- name: Run handlers to restart MySQL
  meta: flush_handlers
  no_log: yes

- name: Update root password
  community.general.mysql_user:
    name: root
    host_all: true
    password: "{{ mysql_root_password }}"
    check_implicit_admin: yes
    login_user: root
    login_unix_socket: "{{ mysql_socket }}"
    sql_log_bin: false
  # no_log: true
  when: mysql_initialize_status is not skipped

# 一定要在更新完root密码后才生成，否则更新密码时会认证失败
- name: Generate ~/.my.cnf
  template:
    src: user.my.cnf.j2
    dest: /root/.my.cnf
    owner: root
    group: root
    mode: "400"
  no_log: True

- name: Removes all anonymous user accounts
  community.general.mysql_user:
    name: ""
    host_all: yes
    sql_log_bin: false
    state: absent

- name: Ensure replication user
  community.general.mysql_user:
    name: "{{ mysql_repl_user | default('repl') }}"
    host: "%"
    password: "{{ mysql_repl_password }}"
    priv: "*.*:REPLICATION SLAVE"
    sql_log_bin: false
    state: present

- name: Include MGR tasks
  include_tasks: mysql_group_replication.yaml
  when: mysql_cluster_type == 'mgr'

- name: Include mysql shell tasks
  include_tasks: mysql_shell.yaml
  run_once: True
  when:
    - mysql_cluster_type == 'mgr'
    - mysql_innodb_cluster_enable|bool
    - ('mysql_primary' in groups and inventory_hostname in groups['mysql_primary']) or groups['mysql'].index(inventory_hostname) == 0

- name: Include Master-Slave tasks
  include_tasks: master_slave.yaml
  when: mysql_cluster_type == 'ms'

- name: Ensure business databases
  community.general.mysql_db:
    name: "{{ item.name }}"
    collation: "{{ item.collation | default('utf8mb4_general_ci') }}"
    encoding: "{{ item.encoding | default('utf8mb4') }}"
    single_transaction: "{{ item.single_transaction | default(omit) }}"
    state: "{{ item.state | default('present') }}"
  run_once: true
  loop: "{{ mysql_databases }}"
  when:
    - mysql_databases|length > 0
    - "('mysql_primary' in groups and inventory_hostname in groups['mysql_primary']) or groups['mysql'].index(inventory_hostname) == 0"

- name: Show tables from database
  community.general.mysql_query:
    login_db: "{{ item.name }}"
    query: "SHOW TABLES"
  run_once: true
  register: _show_tables
  loop: "{{ mysql_databases }}"
  when:
    - mysql_databases|length > 0
    - "('mysql_primary' in groups and inventory_hostname in groups['mysql_primary']) or groups['mysql'].index(inventory_hostname) == 0"
    - item.datafile is defined

- name: Copy data file to target machine
  copy:
    src: "{{ item.item.datafile }}"
    dest: "/tmp/{{ item.item.datafile | basename }}"
  run_once: true
  loop: "{{ _show_tables.results }}"
  when:
    - "('mysql_primary' in groups and inventory_hostname in groups['mysql_primary']) or groups['mysql'].index(inventory_hostname) == 0"
    - not item.skipped and item.rowcount[0]|int == 0

- name: Import data file
  community.general.mysql_db:
    name: "{{ item.item.name }}"
    target: "/tmp/{{ item.item.datafile | basename }}"
    state: import
  environment:
    PATH: "/usr/local/mysql/bin:{{ ansible_env.PATH }}"
  run_once: true
  loop: "{{ _show_tables.results }}"
  when:
    - "('mysql_primary' in groups and inventory_hostname in groups['mysql_primary']) or groups['mysql'].index(inventory_hostname) == 0"
    - not item.skipped and item.rowcount[0]|int == 0

- name: Remove data file
  file:
    path: "/tmp/{{ item.item.datafile | basename }}"
    state: absent
  run_once: true
  loop: "{{ _show_tables.results }}"
  when:
    - "('mysql_primary' in groups and inventory_hostname in groups['mysql_primary']) or groups['mysql'].index(inventory_hostname) == 0"
    - not item.skipped and item.rowcount[0]|int == 0

- name: Ensure business users
  community.general.mysql_user:
    name: "{{ item.name }}"
    host: "{{ item.host | default('%') }}"
    password: "{{ item.password | default(omit) }}"
    encrypted: "{{ item.encrypted | default(omit) }}"
    priv: "{{ item.priv | default(omit) }}"
    append_privs: "{{ item.append_privs | default(omit) }}"
    update_password: "{{ item.update_password | default(omit) }}"
    plugin: "{{ item.plugin | default(omit) }}"
    plugin_hash_string: "{{ item.plugin_hash_string | default(omit) }}"
    plugin_auth_string: "{{ item.plugin_auth_string | default(omit) }}"
    resource_limits: "{{ item.resource_limits | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    sql_log_bin: "{{ False if mysql_cluster_type == 'ms' and mysql_replication_based == 'binlog' else True  }}"
  run_once: "{{ False if mysql_cluster_type == 'ms' and mysql_replication_based == 'binlog' else True }}"
  no_log: yes
  loop: "{{ mysql_users }}"
  when:
    - mysql_users|length > 0
    - "((mysql_cluster_type == 'mgr' or mysql_replication_based == 'gtid') and ('mysql_primary' in groups and inventory_hostname in groups['mysql_primary']) or groups['mysql'].index(inventory_hostname) == 0) or (mysql_cluster_type == 'ms' and mysql_replication_based == 'binlog')"
  tags:
    - molecule-idempotence-notest

- name: Import Cleanup tasks
  import_tasks: cleanup.yaml
